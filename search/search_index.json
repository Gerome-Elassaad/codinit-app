{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to CodinIT.dev","text":"<p>CodinIT.dev allows you to choose the LLM that you use for each prompt! Currently, you can use models from 19+ providers including OpenAI, Anthropic, Ollama, OpenRouter, Google/Gemini, LMStudio, Mistral, xAI, HuggingFace, DeepSeek, Groq, Cohere, Together AI, Perplexity AI, Hyperbolic, Moonshot AI (Kimi), Amazon Bedrock, GitHub Models, and more - with easy extensibility to add any other model supported by the Vercel AI SDK! See the instructions below for running this locally and extending it to include more models.</p>"},{"location":"#table-of-contents","title":"Table of Contents","text":"<ul> <li>Features</li> <li>Setup</li> <li>Prerequisites</li> <li>Clone the Repository</li> <li>Entering API Keys<ul> <li>1. Set API Keys in the <code>.env.local</code> File</li> <li>2. Configure API Keys Directly in the Application</li> </ul> </li> <li>Run the Application</li> <li>Option 1: Without Docker</li> <li>Option 2: With Docker</li> <li>Update Your Local Version to the Latest</li> <li>Adding New LLMs</li> <li>MCP (Model Context Protocol) Integration</li> <li>Git Integration and Version Control</li> <li>Deployment Options</li> <li>Supabase Integration</li> <li>WebContainer and Live Preview</li> <li>Project Templates</li> <li>Available Scripts</li> <li>Development</li> <li>Tips and Tricks</li> </ul>"},{"location":"#features","title":"Features","text":"<ul> <li>AI-powered full-stack web development directly in your browser with live preview</li> <li>Support for 19+ LLM providers with an extensible architecture to integrate additional models</li> <li>Attach images and files to prompts for better contextual understanding</li> <li>Integrated terminal with WebContainer sandbox for running commands and testing</li> <li>Version control with Git - import/export projects, connect to GitHub and GitLab repositories</li> <li>MCP (Model Context Protocol) integration for enhanced AI capabilities and tool calling</li> <li>Database integration with Supabase for backend development</li> <li>One-click deployments to Vercel, Netlify, and GitHub Pages</li> <li>Project templates for popular frameworks (React, Vue, Angular, Next.js, Astro, etc.)</li> <li>Real-time collaboration and project sharing</li> <li>Code diff visualization and version history</li> <li>Download projects as ZIP or push directly to GitHub/GitLab</li> <li>Docker support for containerized development environments</li> <li>Electron app for native desktop experience</li> <li>Theme customization and accessibility features</li> <li>Help icon in sidebar linking to comprehensive documentation</li> <li>Bug reporting system with automatic system information collection</li> <li>Provider configuration API for runtime provider management</li> </ul>"},{"location":"#setup","title":"Setup","text":"<p>If you're new to installing software from GitHub, don't worry! If you encounter any issues, feel free to submit an \"issue\" using the provided links or improve this documentation by forking the repository, editing the instructions, and submitting a pull request. The following instruction will help you get the stable branch up and running on your local machine in no time.</p>"},{"location":"#prerequisites","title":"Prerequisites","text":"<ol> <li>Install Git: Download Git</li> <li> <p>Install Node.js: Download Node.js</p> </li> <li> <p>After installation, the Node.js path is usually added to your system automatically. To verify:</p> <ul> <li>Windows: Search for \"Edit the system environment variables,\" click \"Environment Variables,\" and check if <code>Node.js</code> is in the <code>Path</code> variable.</li> <li>Mac/Linux: Open a terminal and run:    <pre><code>echo $PATH\n</code></pre>    Look for <code>/usr/local/bin</code> in the output.</li> </ul> </li> </ol>"},{"location":"#clone-the-repository","title":"Clone the Repository","text":"<p>Alternatively, you can download the latest version of the project directly from the Releases Page. Simply download the .zip file, extract it, and proceed with the setup instructions below. If you are comfertiable using git then run the command below.</p> <p>Clone the repository using Git:</p> <pre><code>git clone https://github.com/Gerome-Elassaad/codinit-app\ncd codinit-app\n</code></pre>"},{"location":"#entering-api-keys","title":"Entering API Keys","text":"<p>There are two ways to configure your API keys in CodinIT.dev:</p>"},{"location":"#1-set-api-keys-in-the-envlocal-file","title":"1. Set API Keys in the <code>.env.local</code> File","text":"<p>When setting up the application, you will need to add your API keys for the LLMs you wish to use. You can do this by renaming the <code>.env.example</code> file to <code>.env.local</code> and adding your API keys there.</p> <ul> <li>On Mac, you can find the file at <code>[your name]/codinit-app/.env.example</code>.</li> <li>On Windows/Linux, the path will be similar.</li> </ul> <p>If you can't see the file, it's likely because hidden files are not being shown. On Mac, open a Terminal window and enter the following command to show hidden files:</p> <pre><code>defaults write com.apple.finder AppleShowAllFiles YES\n</code></pre> <p>Make sure to add your API keys for each provider you want to use, for example:</p> <pre><code>GROQ_API_KEY=XXX\nOPENAI_API_KEY=XXX\nANTHROPIC_API_KEY=XXX\n</code></pre> <p>Once you've set your keys, you can proceed with running the app. You will set these keys up during the initial setup, and you can revisit and update them later after the app is running.</p> <p>Important for Docker users: Docker Compose needs a <code>.env</code> file for variable substitution. After creating <code>.env.local</code>: - Run <code>./scripts/setup-env.sh</code> to automatically sync the files, or - Manually copy: <code>cp .env.local .env</code></p> <p>Note: Never commit your <code>.env.local</code> or <code>.env</code> files to version control. They're already included in the <code>.gitignore</code>.</p>"},{"location":"#2-configure-api-keys-directly-in-the-application","title":"2. Configure API Keys Directly in the Application","text":"<p>Alternatively, you can configure your API keys directly in the application using the modern settings interface:</p> <ol> <li>Open Settings: Click the settings icon (\u2699\ufe0f) in the sidebar to access the settings panel</li> <li>Navigate to Providers: Select the \"Providers\" tab from the settings menu</li> <li>Choose Provider Type: Switch between \"Cloud Providers\" and \"Local Providers\" tabs</li> <li>Select Provider: Browse the grid of available providers and click on the provider card you want to configure</li> <li>Configure API Key: Click on the \"API Key\" field to enter edit mode, then paste your API key and press Enter</li> <li>Verify Configuration: Look for the green checkmark indicator showing the provider is properly configured</li> </ol> <p>The interface provides: - Real-time validation with visual status indicators - Bulk operations to enable/disable multiple providers at once - Secure storage of API keys in browser cookies - Environment variable auto-detection for server-side configurations</p> <p>Once you've configured your keys, the application will be ready to use the selected LLMs.</p>"},{"location":"#run-the-application","title":"Run the Application","text":""},{"location":"#option-1-without-docker","title":"Option 1: Without Docker","text":"<ol> <li>Install Dependencies:</li> </ol> <pre><code>pnpm install\n</code></pre> <p>If <code>pnpm</code> is not installed, install it using:</p> <pre><code>sudo npm install -g pnpm\n</code></pre> <ol> <li>Start the Application:    <pre><code>pnpm run dev\n</code></pre>    This will start the Remix Vite development server. You will need Google Chrome Canary to run this locally if you use Chrome! It's an easy install and a good browser for web development anyway.</li> </ol>"},{"location":"#option-2-with-docker","title":"Option 2: With Docker","text":""},{"location":"#prerequisites_1","title":"Prerequisites","text":"<ul> <li>Ensure Git, Node.js, and Docker are installed: Download Docker</li> </ul>"},{"location":"#steps","title":"Steps","text":"<ol> <li>Build the Docker Image:</li> </ol> <p>Use the provided NPM scripts:</p> <pre><code>npm run dockerbuild\n</code></pre> <p>Alternatively, use Docker commands directly:</p> <pre><code>docker build . --target codinit-ai-development\n</code></pre> <ol> <li>Run the Container:    Use Docker Compose profiles to manage environments:</li> </ol> <pre><code>docker compose --profile development up\n</code></pre> <ul> <li>With the development profile, changes to your code will automatically reflect in the running container (hot reloading).</li> </ul>"},{"location":"#update-your-local-version-to-the-latest","title":"Update Your Local Version to the Latest","text":"<p>To keep your local version of CodinIT.dev up to date with the latest changes, follow these steps for your operating system:</p>"},{"location":"#1-navigate-to-your-project-folder","title":"1. Navigate to your project folder","text":"<p>Navigate to the directory where you cloned the repository and open a terminal:</p>"},{"location":"#2-fetch-the-latest-changes","title":"2. Fetch the Latest Changes","text":"<p>Use Git to pull the latest changes from the main repository:</p> <pre><code>git pull origin main\n</code></pre>"},{"location":"#3-update-dependencies","title":"3. Update Dependencies","text":"<p>After pulling the latest changes, update the project dependencies by running the following command:</p> <pre><code>pnpm install\n</code></pre>"},{"location":"#4-rebuild-and-start-the-application","title":"4. Rebuild and Start the Application","text":"<ul> <li>If using Docker, ensure you rebuild the Docker image to avoid using a cached version:</li> </ul> <pre><code>docker compose --profile development up --build\n</code></pre> <ul> <li>If not using Docker, you can start the application as usual with:   <pre><code>pnpm run dev\n</code></pre></li> </ul> <p>This ensures that you're running the latest version of CodinIT.dev and can take advantage of all the newest features and bug fixes.</p>"},{"location":"#adding-new-llms","title":"Adding New LLMs","text":"<p>CodinIT.dev supports a modular architecture for adding new LLM providers and models. The system is designed to be easily extensible while maintaining consistency across all providers.</p>"},{"location":"#understanding-the-provider-architecture","title":"Understanding the Provider Architecture","text":"<p>Each LLM provider is implemented as a separate class that extends the <code>BaseProvider</code> class. The provider system includes:</p> <ul> <li>Static Models: Pre-defined models that are always available</li> <li>Dynamic Models: Models that can be loaded from the provider's API at runtime</li> <li>Configuration: API key management and provider-specific settings</li> </ul>"},{"location":"#adding-a-new-provider","title":"Adding a New Provider","text":"<p>To add a new LLM provider, you need to create multiple files:</p>"},{"location":"#1-create-the-provider-class","title":"1. Create the Provider Class","text":"<p>Create a new file in <code>app/lib/modules/llm/providers/your-provider.ts</code>:</p> <pre><code>import { BaseProvider } from '~/lib/modules/llm/base-provider';\nimport type { ModelInfo } from '~/lib/modules/llm/types';\nimport type { LanguageModelV1 } from 'ai';\nimport type { IProviderSetting } from '~/types/model';\nimport { createYourProvider } from '@ai-sdk/your-provider';\n\nexport default class YourProvider extends BaseProvider {\n  name = 'YourProvider';\n  getApiKeyLink = 'https://your-provider.com/api-keys';\n\n  config = {\n    apiTokenKey: 'YOUR_PROVIDER_API_KEY',\n  };\n\n  staticModels: ModelInfo[] = [\n    {\n      name: 'your-model-name',\n      label: 'Your Model Label',\n      provider: 'YourProvider',\n      maxTokenAllowed: 100000,\n      maxCompletionTokens: 4000,\n    },\n  ];\n\n  async getDynamicModels(\n    apiKeys?: Record&lt;string, string&gt;,\n    settings?: IProviderSetting,\n    serverEnv?: Record&lt;string, string&gt;,\n  ): Promise&lt;ModelInfo[]&gt; {\n    // Implement dynamic model loading if supported\n    return [];\n  }\n\n  getModelInstance(options: {\n    model: string;\n    serverEnv: Record&lt;string, string&gt;;\n    apiKeys?: Record&lt;string, string&gt;;\n    providerSettings?: Record&lt;string, IProviderSetting&gt;;\n  }): LanguageModelV1 {\n    const { apiKeys, model } = options;\n    const apiKey = apiKeys?.[this.config.apiTokenKey] || '';\n\n    return createYourProvider({\n      apiKey,\n      // other configuration options\n    })(model);\n  }\n}\n</code></pre>"},{"location":"#2-register-the-provider","title":"2. Register the Provider","text":"<p>Add your provider to <code>app/lib/modules/llm/registry.ts</code>:</p> <pre><code>import YourProvider from './providers/your-provider';\n\n// ... existing imports ...\n\nexport {\n  // ... existing exports ...\n  YourProvider,\n};\n</code></pre>"},{"location":"#3-update-the-manager-if-needed","title":"3. Update the Manager (if needed)","text":"<p>The provider will be automatically registered by the <code>LLMManager</code> through the registry. The manager scans for all classes that extend <code>BaseProvider</code> and registers them automatically.</p>"},{"location":"#adding-models-to-existing-providers","title":"Adding Models to Existing Providers","text":"<p>To add new models to an existing provider:</p> <ol> <li>Edit the provider file (e.g., <code>app/lib/modules/llm/providers/openai.ts</code>)</li> <li>Add to the <code>staticModels</code> array:</li> </ol> <pre><code>staticModels: ModelInfo[] = [\n  // ... existing models ...\n  {\n    name: 'gpt-4o-mini-new',\n    label: 'GPT-4o Mini (New)',\n    provider: 'OpenAI',\n    maxTokenAllowed: 128000,\n    maxCompletionTokens: 16000,\n  },\n];\n</code></pre>"},{"location":"#provider-specific-configuration","title":"Provider-Specific Configuration","text":"<p>Each provider can have its own configuration options:</p> <ul> <li>API Key Environment Variables: Define in the <code>config</code> object</li> <li>Base URL Support: Add <code>baseUrlKey</code> for custom endpoints</li> <li>Provider Settings: Custom settings in the UI</li> <li>Dynamic Model Loading: Implement <code>getDynamicModels()</code> for API-based model discovery</li> </ul>"},{"location":"#testing-your-new-provider","title":"Testing Your New Provider","text":"<ol> <li>Restart the development server after making changes</li> <li>Check the provider appears in the Settings \u2192 Providers section</li> <li>Configure API keys in the provider settings</li> <li>Test the models in a chat session</li> </ol>"},{"location":"#best-practices","title":"Best Practices","text":"<ul> <li>Follow the naming conventions used by existing providers</li> <li>Include proper error handling for API failures</li> <li>Add comprehensive documentation for your provider</li> <li>Test with both static and dynamic models</li> <li>Ensure proper API key validation</li> </ul> <p>The modular architecture makes it easy to add new providers while maintaining consistency and reliability across the entire system.</p>"},{"location":"#mcp-model-context-protocol-integration","title":"MCP (Model Context Protocol) Integration","text":"<p>CodinIT.dev supports the Model Context Protocol (MCP) to extend AI capabilities with external tools and services. MCP is an open protocol that enables LLMs to securely interact with external data sources, APIs, and tools during conversations.</p>"},{"location":"#what-is-mcp","title":"What is MCP?","text":"<p>The Model Context Protocol standardizes how AI assistants connect to different data sources and tools. With MCP, you can:</p> <ul> <li>Connect to databases - Query and manipulate data in real-time</li> <li>Access file systems - Read and write files with proper permissions</li> <li>Integrate APIs - Call external services and retrieve data</li> <li>Use custom tools - Extend the AI with domain-specific capabilities</li> <li>Combine multiple sources - Use tools from different servers simultaneously</li> </ul>"},{"location":"#supported-mcp-server-types","title":"Supported MCP Server Types","text":"<p>CodinIT.dev supports three types of MCP server connections:</p> <ol> <li>STDIO Servers - Local command-line tools that communicate via standard input/output</li> <li>SSE Servers - Server-Sent Events based servers for real-time streaming</li> <li>Streamable HTTP - HTTP-based MCP servers with streaming support</li> </ol>"},{"location":"#setting-up-mcp-servers","title":"Setting up MCP Servers","text":""},{"location":"#basic-setup","title":"Basic Setup","text":"<ol> <li>Navigate to Settings \u2192 Click the settings icon (\u2699\ufe0f) in the sidebar</li> <li>Open MCP Tab \u2192 Select the \"MCP\" tab from the settings menu</li> <li>Add Server Configuration:</li> <li>Click \"Add Server\" or \"Configure Server\"</li> <li>Enter server name and description</li> <li>Choose server type (STDIO, SSE, or HTTP)</li> <li>Configure connection details</li> </ol>"},{"location":"#configuration-examples","title":"Configuration Examples","text":"<p>STDIO Server Example (Local Tool): <pre><code>{\n  \"name\": \"database-tools\",\n  \"type\": \"stdio\",\n  \"command\": \"npx\",\n  \"args\": [\"-y\", \"@modelcontextprotocol/server-postgres\"],\n  \"env\": {\n    \"DATABASE_URL\": \"postgresql://localhost/mydb\"\n  }\n}\n</code></pre></p> <p>SSE Server Example (Remote Service): <pre><code>{\n  \"name\": \"api-connector\",\n  \"type\": \"sse\",\n  \"url\": \"https://api.example.com/mcp\",\n  \"headers\": {\n    \"Authorization\": \"Bearer YOUR_TOKEN\"\n  }\n}\n</code></pre></p>"},{"location":"#mcp-tool-usage","title":"MCP Tool Usage","text":"<p>Once configured, MCP tools become available to the AI during conversations:</p> <ol> <li>Automatic Tool Discovery - CodinIT.dev automatically detects available tools from connected servers</li> <li>Tool Approval Workflow - Review and approve tool executions for security</li> <li>Tool Annotations - AI responses include tool descriptions and usage information</li> <li>Conflict Detection - Handles multiple servers providing the same tool name</li> </ol>"},{"location":"#security-features","title":"Security Features","text":"<ul> <li>User Approval Required - All tool executions require explicit user approval</li> <li>Tool Isolation - Each server runs in its own isolated context</li> <li>Permission Management - Control which tools can be used in each session</li> <li>Error Handling - Comprehensive error reporting for failed tool executions</li> </ul>"},{"location":"#common-mcp-use-cases","title":"Common MCP Use Cases","text":"<p>Development Workflows: - Database schema exploration and queries - File system operations for code generation - Git operations and version control - API testing and integration</p> <p>Data Analysis: - Query databases and data warehouses - Process CSV/JSON files - Generate reports and visualizations - Real-time data fetching</p> <p>Business Operations: - CRM integrations - Customer support ticket management - Inventory and order management - Analytics and reporting</p>"},{"location":"#mcp-server-management","title":"MCP Server Management","text":"<p>Enable/Disable Servers: - Toggle servers on/off without removing configuration - Useful for testing or temporary disconnections</p> <p>Server Health Monitoring: - Connection status indicators - Error logs and diagnostics - Tool availability tracking</p> <p>Configuration Persistence: - Server configurations saved in browser localStorage - Export/import configurations for sharing</p>"},{"location":"#troubleshooting-mcp","title":"Troubleshooting MCP","text":"<p>Connection Issues: - Verify server endpoints and authentication - Check network connectivity - Review server logs for errors</p> <p>Tool Execution Failures: - Ensure proper permissions are granted - Verify tool parameters are correct - Check server compatibility with MCP protocol version</p> <p>Performance Optimization: - Limit number of concurrent tool calls - Use caching where appropriate - Monitor server response times</p>"},{"location":"#available-mcp-resources","title":"Available MCP Resources","text":"<ul> <li>MCP Specification: Model Context Protocol Documentation</li> <li>Server Examples: Browse community-built MCP servers</li> <li>Custom Server Development: Build your own MCP servers for specific needs</li> </ul> <p>The MCP integration transforms CodinIT.dev into a powerful platform that can interact with your entire development ecosystem, making the AI truly context-aware of your data and tools.</p>"},{"location":"#git-integration-and-version-control","title":"Git Integration and Version Control","text":"<p>CodinIT.dev provides comprehensive Git integration for version control, collaboration, and project management with support for both GitHub and GitLab.</p>"},{"location":"#github-integration","title":"GitHub Integration","text":"<ol> <li>Connect your GitHub account in Settings \u2192 Connections \u2192 GitHub</li> <li>Import existing repositories by URL or from your connected account</li> <li>Push projects directly to GitHub with automatic repository creation</li> <li>Sync changes between local development and remote repositories</li> <li>View repository statistics including stars, forks, and contributors</li> <li>Manage branches and create new ones directly from the interface</li> </ol>"},{"location":"#gitlab-integration","title":"GitLab Integration","text":"<ol> <li>Connect your GitLab account in Settings \u2192 Connections \u2192 GitLab</li> <li>Browse and import your GitLab projects</li> <li>Manage GitLab branches and project metadata</li> <li>Push projects to GitLab repositories</li> <li>Access project information and collaboration features</li> </ol>"},{"location":"#version-control-features","title":"Version Control Features","text":"<ul> <li>Automatic commits for major changes</li> <li>Diff visualization to see code changes</li> <li>Branch management and merge conflict resolution</li> <li>Revert to previous versions for debugging</li> <li>Collaborative development with team members</li> <li>Bug report generation with automatic system information</li> </ul>"},{"location":"#export-options","title":"Export Options","text":"<ul> <li>Download as ZIP for easy sharing</li> <li>Push to GitHub or GitLab for version control and collaboration</li> <li>Import from GitHub or GitLab to continue working on existing projects</li> </ul>"},{"location":"#deployment-options","title":"Deployment Options","text":"<p>CodinIT.dev provides one-click deployment to popular hosting platforms, making it easy to share your projects with the world.</p>"},{"location":"#supported-platforms","title":"Supported Platforms","text":""},{"location":"#vercel-deployment","title":"Vercel Deployment","text":"<ol> <li>Connect your Vercel account in Settings \u2192 Connections \u2192 Vercel</li> <li>Click the deploy button in your project</li> <li>CodinIT.dev automatically builds and deploys your project</li> <li>Get a live URL instantly with Vercel's global CDN</li> </ol>"},{"location":"#netlify-deployment","title":"Netlify Deployment","text":"<ol> <li>Connect your Netlify account in Settings \u2192 Connections \u2192 Netlify</li> <li>Deploy with a single click</li> <li>Automatic build configuration and optimization</li> <li>Preview deployments for every change</li> </ol>"},{"location":"#github-pages","title":"GitHub Pages","text":"<ol> <li>Connect your GitHub account</li> <li>Push your project to a GitHub repository</li> <li>Enable GitHub Pages in repository settings</li> <li>Automatic deployment from your repository</li> </ol>"},{"location":"#deployment-features","title":"Deployment Features","text":"<ul> <li>Automatic build configuration for popular frameworks</li> <li>Environment variable management for production</li> <li>Custom domain support through platform settings</li> <li>Deployment previews for testing changes</li> <li>Rollback capabilities for quick issue resolution</li> </ul>"},{"location":"#supabase-integration","title":"Supabase Integration","text":"<p>CodinIT.dev integrates with Supabase to provide backend database functionality, authentication, and real-time features for your applications.</p>"},{"location":"#setting-up-supabase","title":"Setting up Supabase","text":"<ol> <li>Create a Supabase project at supabase.com</li> <li>Get your project URL and API keys from the Supabase dashboard</li> <li>Configure the connection in your CodinIT.dev project</li> <li>Use the Supabase tools to interact with your database</li> </ol>"},{"location":"#database-features","title":"Database Features","text":"<ul> <li>Real-time subscriptions for live data updates</li> <li>Authentication with built-in user management</li> <li>Row Level Security (RLS) policies for data protection</li> <li>Built-in API for CRUD operations</li> <li>Database migrations and schema management</li> </ul>"},{"location":"#integration-with-ai-development","title":"Integration with AI Development","text":"<p>The AI can help you: - Design database schemas for your applications - Write SQL queries and database functions - Implement authentication flows - Create API endpoints for your frontend - Set up real-time features for collaborative apps</p> <p>Supabase integration makes it easy to build full-stack applications with a robust backend infrastructure.</p>"},{"location":"#webcontainer-and-live-preview","title":"WebContainer and Live Preview","text":"<p>CodinIT.dev uses WebContainer technology to provide a secure, isolated development environment with live preview capabilities.</p>"},{"location":"#webcontainer-features","title":"WebContainer Features","text":"<ul> <li>Secure sandbox environment - Run code in isolated containers</li> <li>Live preview - See your changes instantly without leaving the editor</li> <li>Full Node.js environment - Run npm scripts, build tools, and development servers</li> <li>File system access - Direct manipulation of project files</li> <li>Terminal integration - Execute commands and see real-time output</li> </ul>"},{"location":"#development-workflow","title":"Development Workflow","text":"<ol> <li>Write code in the integrated editor</li> <li>Run development servers directly in WebContainer</li> <li>Preview your application in real-time</li> <li>Test functionality with the integrated terminal</li> <li>Debug issues with live error reporting</li> </ol>"},{"location":"#supported-technologies","title":"Supported Technologies","text":"<p>WebContainer supports all major JavaScript frameworks and tools: - React, Vue, Angular, Svelte - Next.js, Nuxt, Astro, Remix - Vite, Webpack, Parcel - Node.js, npm, pnpm, yarn - And many more...</p> <p>The WebContainer integration provides a seamless development experience without the need for local setup.</p>"},{"location":"#project-templates","title":"Project Templates","text":"<p>CodinIT.dev comes with a comprehensive collection of starter templates to help you quickly bootstrap your projects. Choose from popular frameworks and technologies:</p>"},{"location":"#frontend-frameworks","title":"Frontend Frameworks","text":"<ul> <li>React + Vite - Modern React setup with TypeScript</li> <li>Vue.js - Progressive JavaScript framework</li> <li>Angular - Enterprise-ready framework</li> <li>Svelte - Compiler-based framework for fast apps</li> <li>SolidJS - Reactive framework with fine-grained updates</li> </ul>"},{"location":"#full-stack-frameworks","title":"Full-Stack Frameworks","text":"<ul> <li>Next.js with shadcn/ui - React framework with UI components</li> <li>Astro - Static site generator for content-focused sites</li> <li>Qwik - Resumable framework for instant loading</li> <li>Remix - Full-stack React framework</li> <li>Nuxt - Vue.js meta-framework</li> </ul>"},{"location":"#mobile-cross-platform","title":"Mobile &amp; Cross-Platform","text":"<ul> <li>Expo App - React Native with Expo</li> <li>React Native - Cross-platform mobile development</li> </ul>"},{"location":"#presentation-content","title":"Presentation &amp; Content","text":"<ul> <li>Slidev - Developer-friendly presentations</li> <li>Astro Basic - Lightweight static sites</li> </ul>"},{"location":"#vanilla-javascript","title":"Vanilla JavaScript","text":"<ul> <li>Vanilla Vite - Minimal JavaScript setup</li> <li>Vite TypeScript - TypeScript without framework</li> </ul>"},{"location":"#getting-started-with-templates","title":"Getting Started with Templates","text":"<ol> <li>Start a new project in CodinIT.dev</li> <li>Browse available templates in the starter selection</li> <li>Select your preferred technology stack</li> <li>The AI will scaffold your project with best practices</li> <li>Begin development immediately with live preview</li> </ol> <p>All templates are pre-configured with modern tooling, linting, and build processes for immediate productivity.</p>"},{"location":"#available-scripts","title":"Available Scripts","text":""},{"location":"#development-scripts","title":"Development Scripts","text":"<ul> <li><code>pnpm run dev</code>: Starts the development server with hot reloading</li> <li><code>pnpm run build</code>: Builds the project for production</li> <li><code>pnpm run start</code>: Runs the built application locally using Wrangler Pages</li> <li><code>pnpm run preview</code>: Builds and starts locally for production testing</li> <li><code>pnpm test</code>: Runs the test suite using Vitest</li> <li><code>pnpm run test:watch</code>: Runs tests in watch mode</li> <li><code>pnpm run lint</code>: Runs ESLint with auto-fix</li> <li><code>pnpm run typecheck</code>: Runs TypeScript type checking</li> <li><code>pnpm run typegen</code>: Generates TypeScript types using Wrangler</li> </ul>"},{"location":"#docker-scripts","title":"Docker Scripts","text":"<ul> <li><code>pnpm run dockerbuild</code>: Builds Docker image for development</li> <li><code>pnpm run dockerbuild:prod</code>: Builds Docker image for production</li> <li><code>pnpm run dockerrun</code>: Runs the Docker container</li> <li><code>docker compose --profile development up</code>: Runs with Docker Compose (development)</li> </ul>"},{"location":"#electron-scripts","title":"Electron Scripts","text":"<ul> <li><code>pnpm electron:build:mac</code>: Builds for macOS</li> <li><code>pnpm electron:build:win</code>: Builds for Windows</li> <li><code>pnpm electron:build:linux</code>: Builds for Linux</li> <li><code>pnpm electron:build:dist</code>: Builds for all platforms (Mac, Windows, Linux)</li> <li><code>pnpm electron:build:unpack</code>: Creates unpacked build for testing</li> </ul>"},{"location":"#deployment-scripts","title":"Deployment Scripts","text":"<ul> <li><code>pnpm run deploy</code>: Builds and deploys to Cloudflare Pages</li> <li><code>npm run dockerbuild</code>: Alternative Docker build command</li> </ul>"},{"location":"#utility-scripts","title":"Utility Scripts","text":"<ul> <li><code>pnpm run clean</code>: Cleans build artifacts</li> <li><code>pnpm run prepare</code>: Sets up Husky for git hooks</li> </ul>"},{"location":"#development","title":"Development","text":"<p>To start the development server:</p> <pre><code>pnpm run dev\n</code></pre> <p>This will start the Remix Vite development server. You will need Google Chrome Canary to run this locally if you use Chrome! It's an easy install and a good browser for web development anyway.</p>"},{"location":"#getting-help-resources","title":"Getting Help &amp; Resources","text":""},{"location":"#help-icon-in-sidebar","title":"Help Icon in Sidebar","text":"<p>CodinIT.dev includes a convenient help icon (?) in the sidebar that provides quick access to comprehensive documentation. Simply click the help icon to open the full documentation in a new tab.</p> <p>The documentation includes: - Complete setup guides for all supported providers - Feature explanations for advanced capabilities - Troubleshooting guides for common issues - Best practices for optimal usage - FAQ section with detailed answers</p>"},{"location":"#community-support","title":"Community Support","text":"<ul> <li>GitHub Issues: Report bugs and request features</li> <li>Contributing Guide: Learn how to contribute to the project</li> </ul>"},{"location":"#tips-and-tricks","title":"Tips and Tricks","text":"<p>Here are some tips to get the most out of CodinIT.dev:</p> <ul> <li> <p>Be specific about your stack: If you want to use specific frameworks or libraries (like Astro, Tailwind, ShadCN, or any other popular JavaScript framework), mention them in your initial prompt to ensure CodinIT.dev scaffolds the project accordingly.</p> </li> <li> <p>Use the enhance prompt icon: Before sending your prompt, try clicking the 'enhance' icon to have the AI model help you refine your prompt, then edit the results before submitting.</p> </li> <li> <p>Scaffold the basics first, then add features: Make sure the basic structure of your application is in place before diving into more advanced functionality. This helps CodinIT.devunderstand the foundation of your project and ensure everything is wired up right before building out more advanced functionality.</p> </li> <li> <p>Batch simple instructions: Save time by combining simple instructions into one message. For example, you can ask CodinIT.devto change the color scheme, add mobile responsiveness, and restart the dev server, all in one go saving you time and reducing API credit consumption significantly.</p> </li> <li> <p>Access documentation quickly: Use the help icon (?) in the sidebar for instant access to guides, troubleshooting, and best practices.</p> </li> </ul>"},{"location":"CONTRIBUTING/","title":"Contribution Guidelines","text":"<p>Welcome! This guide provides all the details you need to contribute effectively to the project. Thank you for helping us make codinit.dev a better tool for developers worldwide. \ud83d\udca1</p>"},{"location":"CONTRIBUTING/#table-of-contents","title":"\ud83d\udccb Table of Contents","text":"<ol> <li>Code of Conduct</li> <li>How Can I Contribute?</li> <li>Pull Request Guidelines</li> <li>Coding Standards</li> <li>Development Setup</li> <li>Testing</li> <li>Deployment</li> <li>Docker Deployment</li> <li>VS Code Dev Containers Integration</li> </ol>"},{"location":"CONTRIBUTING/#code-of-conduct","title":"\ud83d\udee1\ufe0f Code of Conduct","text":"<p>This project is governed by our Code of Conduct. By participating, you agree to uphold this code. Report unacceptable behavior to the project maintainers.</p>"},{"location":"CONTRIBUTING/#how-can-i-contribute","title":"\ud83d\udee0\ufe0f How Can I Contribute?","text":""},{"location":"CONTRIBUTING/#1-reporting-bugs-or-feature-requests","title":"1\ufe0f\u20e3 Reporting Bugs or Feature Requests","text":"<ul> <li>Check the issue tracker to avoid duplicates.</li> <li>Use issue templates (if available).</li> <li>Provide detailed, relevant information and steps to reproduce bugs.</li> </ul>"},{"location":"CONTRIBUTING/#2-code-contributions","title":"2\ufe0f\u20e3 Code Contributions","text":"<ol> <li>Fork the repository.</li> <li>Create a feature or fix branch.</li> <li>Write and test your code.</li> <li>Submit a pull request (PR).</li> </ol>"},{"location":"CONTRIBUTING/#3-join-as-a-core-contributor","title":"3\ufe0f\u20e3 Join as a Core Contributor","text":"<p>Interested in maintaining and growing the project? Fill out our Contributor Application Form.</p>"},{"location":"CONTRIBUTING/#pull-request-guidelines","title":"\u2705 Pull Request Guidelines","text":""},{"location":"CONTRIBUTING/#pr-checklist","title":"PR Checklist","text":"<ul> <li>Branch from the main branch.</li> <li>Update documentation, if needed.</li> <li>Test all functionality manually.</li> <li>Focus on one feature/bug per PR.</li> </ul>"},{"location":"CONTRIBUTING/#review-process","title":"Review Process","text":"<ol> <li>Manual testing by reviewers.</li> <li>At least one maintainer review required.</li> <li>Address review comments.</li> <li>Maintain a clean commit history.</li> </ol>"},{"location":"CONTRIBUTING/#coding-standards","title":"\ud83d\udccf Coding Standards","text":""},{"location":"CONTRIBUTING/#general-guidelines","title":"General Guidelines","text":"<ul> <li>Follow existing code style.</li> <li>Comment complex logic.</li> <li>Keep functions small and focused.</li> <li>Use meaningful variable names.</li> </ul>"},{"location":"CONTRIBUTING/#development-setup","title":"\ud83d\udda5\ufe0f Development Setup","text":""},{"location":"CONTRIBUTING/#1-initial-setup","title":"1\ufe0f\u20e3 Initial Setup","text":"<ul> <li>Clone the repository:   <pre><code>git clone https://github.com/Gerome-Elassaad/codinit-app.git\ncd codinit-app\n</code></pre></li> <li>Install dependencies:   <pre><code>pnpm install\n</code></pre></li> <li>Set up environment variables:</li> <li>Rename <code>.env.example</code> to <code>.env.local</code>.</li> <li>Add your API keys for providers you want to use:      <pre><code>GROQ_API_KEY=XXX\nOPENAI_API_KEY=XXX\nANTHROPIC_API_KEY=XXX\nGOOGLE_GENERATIVE_AI_API_KEY=XXX\nMOONSHOT_API_KEY=XXX\nXAI_API_KEY=XXX\n# ... add other provider keys as needed\n</code></pre></li> <li>For Docker users: Run the setup script or manually copy <code>.env.local</code> to <code>.env</code>:      <pre><code># Option 1: Use the setup script\n./scripts/setup-env.sh\n\n# Option 2: Manual copy\ncp .env.local .env\n</code></pre>      Docker Compose requires <code>.env</code> for variable substitution.</li> <li>Optionally set:<ul> <li>Debug level: <code>VITE_LOG_LEVEL=debug</code></li> <li>Context size: <code>DEFAULT_NUM_CTX=32768</code></li> <li>Local provider base URLs (Ollama, LM Studio): Use <code>127.0.0.1</code> instead of <code>localhost</code></li> </ul> </li> </ul> <p>Note: Never commit your <code>.env.local</code> or <code>.env</code> files to version control. They're already in <code>.gitignore</code>.</p>"},{"location":"CONTRIBUTING/#2-run-development-server","title":"2\ufe0f\u20e3 Run Development Server","text":"<pre><code>pnpm run dev\n</code></pre> <p>Tip: Use Google Chrome Canary for local testing.</p>"},{"location":"CONTRIBUTING/#testing","title":"\ud83e\uddea Testing","text":"<p>Run the test suite with:</p> <pre><code>pnpm test\n</code></pre>"},{"location":"CONTRIBUTING/#deployment","title":"\ud83d\ude80 Deployment","text":""},{"location":"CONTRIBUTING/#deploy-to-cloudflare-pages","title":"Deploy to Cloudflare Pages","text":"<pre><code>pnpm run deploy\n</code></pre> <p>Ensure you have required permissions and that Wrangler is configured.</p>"},{"location":"CONTRIBUTING/#docker-deployment","title":"\ud83d\udc33 Docker Deployment","text":"<p>This section outlines the methods for deploying the application using Docker. The processes for Development and Production are provided separately for clarity.</p>"},{"location":"CONTRIBUTING/#development-environment","title":"\ud83e\uddd1\u200d\ud83d\udcbb Development Environment","text":""},{"location":"CONTRIBUTING/#build-options","title":"Build Options","text":"<p>Option 1: Helper Scripts</p> <pre><code># Development build\nnpm run dockerbuild\n</code></pre> <p>Option 2: Direct Docker Build Command</p> <pre><code>docker build . --target codinit-ai-development\n</code></pre> <p>Option 3: Docker Compose Profile</p> <pre><code>docker compose --profile development up\n</code></pre>"},{"location":"CONTRIBUTING/#running-the-development-container","title":"Running the Development Container","text":"<pre><code>docker run -p 5173:5173 --env-file .env.local codinit-ai:development\n</code></pre>"},{"location":"CONTRIBUTING/#production-environment","title":"\ud83c\udfed Production Environment","text":""},{"location":"CONTRIBUTING/#build-options_1","title":"Build Options","text":"<p>Option 1: Helper Scripts</p> <pre><code># Production build\nnpm run dockerbuild:prod\n</code></pre> <p>Option 2: Direct Docker Build Command</p> <pre><code>docker build . --target codinit-ai-production\n</code></pre> <p>Option 3: Docker Compose Profile</p> <pre><code>docker compose --profile production up\n</code></pre>"},{"location":"CONTRIBUTING/#running-the-production-container","title":"Running the Production Container","text":"<pre><code>docker run -p 5173:5173 --env-file .env.local codinit-ai:production\n</code></pre>"},{"location":"CONTRIBUTING/#coolify-deployment","title":"Coolify Deployment","text":"<p>For an easy deployment process, use Coolify:</p> <ol> <li>Import your Git repository into Coolify.</li> <li>Choose Docker Compose as the build pack.</li> <li>Configure environment variables (e.g., API keys).</li> <li>Set the start command:    <pre><code>docker compose --profile production up\n</code></pre></li> </ol>"},{"location":"CONTRIBUTING/#vs-code-dev-containers-integration","title":"\ud83d\udee0\ufe0f VS Code Dev Containers Integration","text":"<p>The <code>docker-compose.yaml</code> configuration is compatible with VS Code Dev Containers, making it easy to set up a development environment directly in Visual Studio Code.</p>"},{"location":"CONTRIBUTING/#steps-to-use-dev-containers","title":"Steps to Use Dev Containers","text":"<ol> <li>Open the command palette in VS Code (<code>Ctrl+Shift+P</code> or <code>Cmd+Shift+P</code> on macOS).</li> <li>Select Dev Containers: Reopen in Container.</li> <li>Choose the development profile when prompted.</li> <li>VS Code will rebuild the container and open it with the pre-configured environment.</li> </ol>"},{"location":"CONTRIBUTING/#environment-variables","title":"\ud83d\udd11 Environment Variables","text":"<p>Ensure <code>.env.local</code> is configured correctly with:</p> <ul> <li>API keys.</li> <li>Context-specific configurations.</li> </ul> <p>Example for the <code>DEFAULT_NUM_CTX</code> variable:</p> <pre><code>DEFAULT_NUM_CTX=24576 # Uses 32GB VRAM\n</code></pre>"},{"location":"FAQ/","title":"Frequently Asked Questions (FAQ)","text":""},{"location":"FAQ/#models-and-setup","title":"Models and Setup","text":"What are the best models for CodinIT.dev? <p>For the best experience with CodinIT.dev, we recommend using the following models from our 19+ supported providers:</p> <pre><code>**Top Recommended Models:**\n- **Claude 3.5 Sonnet** (Anthropic): Best overall coder, excellent for complex applications\n- **GPT-4o** (OpenAI): Strong alternative with great performance across all use cases\n- **Claude 4 Opus** (Anthropic): Latest flagship model with enhanced capabilities\n- **Gemini 2.0 Flash** (Google): Exceptional speed for rapid development\n- **DeepSeekCoder V3** (DeepSeek): Best open-source model for coding tasks\n\n**Self-Hosting Options:**\n- **DeepSeekCoder V2 236b**: Powerful self-hosted option\n- **Qwen 2.5 Coder 32b**: Best for moderate hardware requirements\n- **Ollama models**: Local inference with various model sizes\n\n**Latest Specialized Models:**\n- **Moonshot AI (Kimi)**: Kimi K2 models with advanced reasoning capabilities\n- **xAI Grok 4**: Latest Grok model with 256K context window\n- **Anthropic Claude 4 Opus**: Latest flagship model from Anthropic\n\n!!! tip \"Model Selection Tips\"\n    - Use larger models (7B+ parameters) for complex applications\n    - Claude models excel at structured code generation\n    - GPT-4o provides excellent general-purpose coding assistance\n    - Gemini models offer the fastest response times\n</code></pre> How do I configure API keys for different providers? <p>You can configure API keys in two ways:</p> <pre><code>**Option 1: Environment Variables (Recommended for production)**\nCreate a `.env.local` file in your project root:\n```bash\nANTHROPIC_API_KEY=your_anthropic_key_here\nOPENAI_API_KEY=your_openai_key_here\nGOOGLE_GENERATIVE_AI_API_KEY=your_google_key_here\nMOONSHOT_API_KEY=your_moonshot_key_here\nXAI_API_KEY=your_xai_key_here\n```\n\n**Option 2: In-App Configuration**\n- Click the settings icon (\u2699\ufe0f) in the sidebar\n- Navigate to the \"Providers\" tab\n- Switch between \"Cloud Providers\" and \"Local Providers\" tabs\n- Click on a provider card to expand its configuration\n- Click on the \"API Key\" field to enter edit mode\n- Paste your API key and press Enter to save\n- Look for the green checkmark to confirm proper configuration\n\n!!! note \"Security Note\"\n    Never commit API keys to version control. The `.env.local` file is already in `.gitignore`.\n</code></pre> How do I add a new LLM provider? <p>CodinIT.dev uses a modular provider architecture. To add a new provider:</p> <pre><code>1. **Create a Provider Class** in `app/lib/modules/llm/providers/your-provider.ts`\n2. **Implement the BaseProvider interface** with your provider's specific logic\n3. **Register the provider** in `app/lib/modules/llm/registry.ts`\n4. **The system automatically detects** and registers your new provider\n\nSee the [Adding New LLMs](../#adding-new-llms) section for complete implementation details.\n</code></pre> How do I set up Moonshot AI (Kimi) provider? <p>Moonshot AI provides access to advanced Kimi models with excellent reasoning capabilities:</p> <pre><code>**Setup Steps:**\n1. Visit [Moonshot AI Platform](https://platform.moonshot.ai/console/api-keys)\n2. Create an account and generate an API key\n3. Add `MOONSHOT_API_KEY=your_key_here` to your `.env.local` file\n4. Or configure it directly in Settings \u2192 Providers \u2192 Cloud Providers \u2192 Moonshot\n\n**Available Models:**\n- **Kimi K2 Preview**: Latest Kimi model with 128K context\n- **Kimi K2 Turbo**: Fast inference optimized version\n- **Kimi Thinking**: Specialized for complex reasoning tasks\n- **Moonshot v1 series**: Legacy models with vision capabilities\n\n!!! tip \"Moonshot AI Features\"\n    - Excellent for Chinese language tasks\n    - Strong reasoning capabilities\n    - Vision-enabled models available\n    - Competitive pricing\n</code></pre> What are the latest xAI Grok models? <p>xAI has released several new Grok models with enhanced capabilities:</p> <pre><code>**Latest Models:**\n- **Grok 4**: Most advanced model with 256K context window\n- **Grok 4 (07-09)**: Specialized variant for specific tasks\n- **Grok 3 Beta**: Previous generation with 131K context\n- **Grok 3 Mini variants**: Optimized for speed and efficiency\n\n**Setup:**\n1. Get your API key from [xAI Platform](https://docs.x.ai/docs/quickstart#creating-an-api-key)\n2. Add `XAI_API_KEY=your_key_here` to your `.env.local` file\n3. Models will be available in the provider selection\n</code></pre>"},{"location":"FAQ/#best-practices","title":"Best Practices","text":"How do I access help and documentation? <p>CodinIT.dev provides multiple ways to access help and documentation:</p> <pre><code>**Help Icon in Sidebar:**\n- Look for the question mark (?) icon in the sidebar\n- Click it to open the full documentation in a new tab\n- Provides instant access to guides, troubleshooting, and FAQs\n\n**Documentation Resources:**\n- **Main Documentation**: Complete setup and feature guides\n- **FAQ Section**: Answers to common questions\n- **Troubleshooting**: Solutions for common issues\n- **Best Practices**: Tips for optimal usage\n\n**Community Support:**\n- **GitHub Issues**: Report bugs and request features\n</code></pre> How do I get the best results with CodinIT.dev? <p>Follow these proven strategies for optimal results:</p> <pre><code>**Project Setup:**\n- **Be specific about your stack**: Mention frameworks/libraries (Astro, Tailwind, ShadCN, Next.js) in your initial prompt\n- **Choose appropriate templates**: Use our 15+ project templates for quick starts\n- **Configure providers properly**: Set up your preferred LLM providers before starting\n\n**Development Workflow:**\n- **Use the enhance prompt icon**: Click the enhance icon to let AI refine your prompts before submitting\n- **Scaffold basics first**: Build foundational structure before adding advanced features\n- **Batch simple instructions**: Combine tasks like *\"Change colors, add mobile responsiveness, restart dev server\"*\n\n**Advanced Features:**\n- **Leverage MCP tools**: Use Model Context Protocol for enhanced AI capabilities\n- **Connect databases**: Integrate Supabase for backend functionality\n- **Use Git integration**: Version control your projects with GitHub\n- **Deploy easily**: Use built-in Vercel, Netlify, or GitHub Pages deployment\n</code></pre> What is MCP and why should I use it? <p>MCP (Model Context Protocol) is an open protocol that extends CodinIT.dev's AI capabilities by allowing it to interact with external tools and data sources:</p> <pre><code>**What MCP Enables:**\n- **Database Access**: Query SQL databases, MongoDB, Redis, and more\n- **File Operations**: Read/write files with proper permissions\n- **API Integrations**: Connect to REST APIs, GraphQL endpoints\n- **Custom Tools**: Build domain-specific tools for your workflow\n- **Real-time Data**: Access live data during AI conversations\n\n**Why Use MCP:**\n- Makes the AI aware of your specific data and context\n- Automates complex workflows with multiple tool calls\n- Securely connects to enterprise systems\n- Standardized protocol supported by multiple AI platforms\n</code></pre> How do I set up MCP servers in CodinIT.dev? <p>Setting up MCP servers is straightforward:</p> <pre><code>**Step-by-Step Setup:**\n1. **Open Settings**: Click the settings icon (\u2699\ufe0f) in the sidebar\n2. **Navigate to MCP Tab**: Select \"MCP\" from the settings menu\n3. **Add Server**: Click \"Add Server\" or \"Configure Server\"\n4. **Choose Server Type**:\n   - **STDIO**: For local command-line tools\n   - **SSE**: For Server-Sent Events servers\n   - **HTTP**: For HTTP-based MCP servers\n5. **Configure Connection**:\n   - Enter server name and description\n   - Set command/URL based on server type\n   - Add required environment variables or headers\n6. **Save and Enable**: Save configuration and enable the server\n\n**Example STDIO Configuration (PostgreSQL)**:\n```json\n{\n  \"name\": \"postgres-db\",\n  \"type\": \"stdio\",\n  \"command\": \"npx\",\n  \"args\": [\"-y\", \"@modelcontextprotocol/server-postgres\"],\n  \"env\": {\n    \"DATABASE_URL\": \"postgresql://user:pass@localhost/mydb\"\n  }\n}\n```\n\n**Example SSE Configuration (Remote API)**:\n```json\n{\n  \"name\": \"my-api\",\n  \"type\": \"sse\",\n  \"url\": \"https://api.example.com/mcp\",\n  \"headers\": {\n    \"Authorization\": \"Bearer YOUR_API_TOKEN\"\n  }\n}\n```\n</code></pre> What MCP server types are supported? <p>CodinIT.dev supports three types of MCP server connections:</p> <pre><code>**1. STDIO Servers (Local Tools)**\n- Run as local command-line processes\n- Communicate via standard input/output\n- Best for: Local databases, file systems, CLI tools\n- Examples: PostgreSQL server, filesystem server, git tools\n\n**2. SSE Servers (Server-Sent Events)**\n- Connect to remote servers via HTTP\n- Real-time streaming with Server-Sent Events\n- Best for: Remote APIs, cloud services\n- Examples: Cloud database services, third-party APIs\n\n**3. Streamable HTTP Servers**\n- HTTP-based protocol with streaming support\n- Flexible connection options\n- Best for: Custom services, enterprise systems\n- Examples: Internal APIs, custom business logic\n\nEach type has different setup requirements and use cases. Choose based on your needs.\n</code></pre> How do MCP tools work during conversations? <p>When MCP servers are configured, their tools become available to the AI:</p> <pre><code>**Tool Discovery:**\n- CodinIT.dev automatically detects all tools from connected servers\n- Tools appear in the AI's available tool list\n- Tool descriptions help the AI understand when to use them\n\n**Tool Execution Flow:**\n1. **AI Decides**: Based on your prompt, AI determines which tool to use\n2. **User Approval**: You review and approve the tool execution for security\n3. **Tool Runs**: The MCP server executes the tool with provided parameters\n4. **Results Return**: Tool output is sent back to the AI\n5. **AI Responds**: AI incorporates tool results into its response\n\n**Approval States:**\n- **APPROVE**: Allow the tool to execute\n- **REJECT**: Deny the tool execution\n- **ERROR**: Tool execution failed\n\n**Security Features:**\n- All tool executions require explicit user approval\n- Tool parameters are shown before execution\n- Failed executions are logged with error details\n</code></pre> What are common MCP use cases? <p>MCP enables many powerful workflows:</p> <pre><code>**Development &amp; DevOps:**\n- Query database schemas and generate migrations\n- Read/write code files for automated refactoring\n- Execute git commands for version control\n- Deploy applications to cloud platforms\n- Run test suites and analyze results\n\n**Data Analysis:**\n- Query SQL databases for business intelligence\n- Process CSV/JSON files for data transformation\n- Generate charts and visualizations\n- Fetch real-time data from APIs\n- Aggregate data from multiple sources\n\n**Business Operations:**\n- Integrate with CRM systems (Salesforce, HubSpot)\n- Manage customer support tickets\n- Access inventory and order management systems\n- Generate reports from business data\n- Automate routine administrative tasks\n\n**Content Management:**\n- Read/write documentation files\n- Manage blog posts and articles\n- Update website content\n- Process and optimize images\n- Version control content changes\n</code></pre> How do I troubleshoot MCP connection issues? <p>Common MCP issues and solutions:</p> <pre><code>**Server Won't Connect:**\n- Verify server endpoint/command is correct\n- Check authentication credentials (API keys, tokens)\n- Ensure network connectivity for remote servers\n- Review server logs for specific error messages\n- Confirm MCP protocol version compatibility\n\n**Tools Not Appearing:**\n- Restart the MCP server to refresh tool list\n- Check server configuration in Settings \u2192 MCP\n- Verify server is enabled (toggle switch on)\n- Look for errors in browser console (F12)\n- Confirm server implements tool discovery correctly\n\n**Tool Execution Failures:**\n- Check tool parameters are valid\n- Ensure required permissions are granted\n- Verify environment variables are set correctly\n- Review tool-specific error messages\n- Test the tool outside CodinIT.dev first\n\n**Performance Issues:**\n- Limit number of concurrent tool calls\n- Use smaller result sets when querying databases\n- Implement caching in your MCP server\n- Monitor server response times\n- Consider using local servers for better performance\n\n**Conflict Resolution:**\n- If multiple servers provide the same tool name, CodinIT.dev will detect the conflict\n- Rename tools in server configuration to avoid conflicts\n- Disable unused servers to reduce tool namespace pollution\n</code></pre> Can I build my own MCP servers? <p>Yes! You can create custom MCP servers for your specific needs:</p> <pre><code>**Building Custom Servers:**\n- Use the official MCP SDK: `@modelcontextprotocol/sdk`\n- Implement server in TypeScript, Python, or other languages\n- Define custom tools with input schemas and handlers\n- Deploy as STDIO, SSE, or HTTP server\n\n**Basic Server Example (TypeScript)**:\n```typescript\nimport { Server } from '@modelcontextprotocol/sdk/server/index.js';\nimport { StdioServerTransport } from '@modelcontextprotocol/sdk/server/stdio.js';\n\nconst server = new Server({\n  name: 'my-custom-server',\n  version: '1.0.0',\n});\n\n// Register a custom tool\nserver.setRequestHandler('tools/list', async () =&gt; ({\n  tools: [{\n    name: 'get_user_data',\n    description: 'Fetch user data from database',\n    inputSchema: {\n      type: 'object',\n      properties: {\n        userId: { type: 'string' }\n      }\n    }\n  }]\n}));\n\n// Start the server\nconst transport = new StdioServerTransport();\nawait server.connect(transport);\n```\n\n**Resources:**\n- MCP Documentation: [modelcontextprotocol.io](https://modelcontextprotocol.io)\n- Example Servers: GitHub MCP organization\n- SDK Reference: @modelcontextprotocol/sdk package\n\nCustom servers allow you to integrate any system or data source with CodinIT.dev!\n</code></pre> How do I deploy my CodinIT.dev projects? <p>CodinIT.dev supports one-click deployment to multiple platforms:</p> <pre><code>**Supported Platforms:**\n- **Vercel**: Go to Settings \u2192 Connections \u2192 Vercel, then deploy with one click\n- **Netlify**: Connect your Netlify account and deploy instantly\n- **GitHub Pages**: Push to GitHub and enable Pages in repository settings\n\n**Deployment Features:**\n- Automatic build configuration for popular frameworks\n- Environment variable management\n- Custom domain support\n- Preview deployments for testing\n</code></pre> How do I use Git integration features? <p>CodinIT.dev provides comprehensive Git integration with GitHub and GitLab:</p> <pre><code>**Basic Git Operations:**\n- Import existing repositories by URL\n- Create new repositories on GitHub or GitLab\n- Automatic commits for major changes\n- Push/pull changes seamlessly\n\n**GitHub Integration:**\n- Connect GitHub account in Settings \u2192 Connections \u2192 GitHub\n- Import from your connected repositories\n- Create and manage branches\n- View repository statistics\n\n**GitLab Integration:**\n- Connect GitLab account in Settings \u2192 Connections \u2192 GitLab\n- Browse and import GitLab projects\n- Manage GitLab branches\n- Access project metadata\n\n**Advanced Features:**\n- Version control with diff visualization\n- Collaborative development support\n- Bug report generation with automatic system information\n</code></pre>"},{"location":"FAQ/#project-information","title":"Project Information","text":"How do I contribute to CodinIT.dev? <p>Check out our Contribution Guide for more details on how to get involved!</p> Why are there so many open issues/pull requests? <p>We're forming a team of maintainers to manage demand and streamline issue resolution. The maintainers are rockstars, and we're also exploring partnerships to help the project thrive.</p>"},{"location":"FAQ/#new-features-technologies","title":"New Features &amp; Technologies","text":"What's new in CodinIT.dev? <p>Recent major additions to CodinIT.dev include:</p> <pre><code>**Advanced AI Capabilities:**\n- **19 LLM Providers**: Support for Anthropic, OpenAI, Google, DeepSeek, Cohere, and more\n- **MCP Integration**: Model Context Protocol for enhanced AI tool calling\n- **Dynamic Model Loading**: Automatic model discovery from provider APIs\n\n**Development Tools:**\n- **WebContainer**: Secure sandboxed development environment\n- **Live Preview**: Real-time application previews without leaving the editor\n- **Project Templates**: 15+ starter templates for popular frameworks\n\n**Version Control &amp; Collaboration:**\n- **Git Integration**: Import/export projects with GitHub and GitLab\n- **Automatic Commits**: Smart version control for project changes\n- **Diff Visualization**: See code changes clearly\n- **Bug Reporting**: Built-in bug report generation and tracking\n\n**Backend &amp; Database:**\n- **Supabase Integration**: Built-in database and authentication\n- **API Integration**: Connect to external services and databases\n\n**Deployment &amp; Production:**\n- **One-Click Deployment**: Vercel, Netlify, and GitHub Pages support\n- **Environment Management**: Production-ready configuration\n- **Build Optimization**: Automatic configuration for popular frameworks\n</code></pre> How do I use the new project templates? <p>CodinIT.dev offers templates for popular frameworks and technologies:</p> <pre><code>**Getting Started:**\n1. Start a new project in CodinIT.dev\n2. Browse available templates in the starter selection\n3. Choose your preferred technology stack\n4. The AI will scaffold your project with best practices\n\n**Available Templates:**\n- **Frontend**: React, Vue, Angular, Svelte, SolidJS\n- **Full-Stack**: Next.js, Astro, Qwik, Remix, Nuxt\n- **Mobile**: Expo, React Native\n- **Content**: Slidev presentations, Astro blogs\n- **Vanilla**: Vite with TypeScript/JavaScript\n\nTemplates include pre-configured tooling, linting, and build processes.\n</code></pre> How does WebContainer work? <p>WebContainer provides a secure development environment:</p> <pre><code>**Features:**\n- **Isolated Environment**: Secure sandbox for running code\n- **Full Node.js Support**: Run npm, build tools, and dev servers\n- **Live File System**: Direct manipulation of project files\n- **Terminal Integration**: Execute commands with real-time output\n\n**Supported Technologies:**\n- All major JavaScript frameworks (React, Vue, Angular, etc.)\n- Build tools (Vite, Webpack, Parcel)\n- Package managers (npm, pnpm, yarn)\n</code></pre> How do I connect external databases? <p>Use Supabase for backend database functionality:</p> <pre><code>**Setup Process:**\n1. Create a Supabase project at supabase.com\n2. Get your project URL and API keys\n3. Configure the connection in your CodinIT.dev project\n4. Use Supabase tools to interact with your database\n\n**Available Features:**\n- Real-time subscriptions\n- Built-in authentication\n- Row Level Security (RLS)\n- Automatic API generation\n- Database migrations\n</code></pre>"},{"location":"FAQ/#model-comparisons","title":"Model Comparisons","text":"How do local LLMs compare to larger models like Claude 3.5 Sonnet for CodinIT.dev? <p>While local LLMs are improving rapidly, larger models still offer the best results for complex applications. Here's the current landscape:</p> <pre><code>**Recommended for Production:**\n- **Claude 4 Opus**: Latest flagship model with enhanced reasoning (200K context)\n- **Claude 3.5 Sonnet**: Proven excellent performance across all tasks\n- **GPT-4o**: Strong general-purpose coding with great reliability\n- **xAI Grok 4**: Latest Grok with 256K context window\n\n**Fast &amp; Efficient:**\n- **Gemini 2.0 Flash**: Exceptional speed for rapid development\n- **Claude 3 Haiku**: Cost-effective for simpler tasks\n- **xAI Grok 3 Mini Fast**: Optimized for speed and efficiency\n\n**Advanced Reasoning:**\n- **Moonshot AI Kimi K2**: Advanced reasoning with 128K context\n- **Moonshot AI Kimi Thinking**: Specialized for complex reasoning tasks\n\n**Open Source &amp; Self-Hosting:**\n- **DeepSeekCoder V3**: Best open-source model available\n- **DeepSeekCoder V2 236b**: Powerful self-hosted option\n- **Qwen 2.5 Coder 32b**: Good balance of performance and resource usage\n\n**Local Models (Ollama):**\n- Best for privacy and offline development\n- Use 7B+ parameter models for reasonable performance\n- Still experimental for complex, large-scale applications\n\n!!! tip \"Model Selection Guide\"\n    - Use Claude/GPT-4o for complex applications\n    - Use Gemini for fast prototyping\n    - Use local models for privacy/offline development\n    - Always test with your specific use case\n</code></pre>"},{"location":"FAQ/#troubleshooting","title":"Troubleshooting","text":"There was an error processing this request <p>This generic error message means something went wrong. Check these locations:</p> <pre><code>- **Terminal output**: If you started with Docker or `pnpm`\n- **Browser developer console**: Press `F12` \u2192 Console tab\n- **Server logs**: Check for any backend errors\n- **Network tab**: Verify API calls are working\n</code></pre> x-api-key header missing <p>This authentication error can be resolved by:</p> <pre><code>- **Restarting the container**: `docker compose restart` (if using Docker)\n- **Switching run methods**: Try `pnpm` if using Docker, or vice versa\n- **Checking API keys**: Verify your API keys are properly configured\n- **Clearing browser cache**: Sometimes cached authentication causes issues\n</code></pre> Blank preview when running the app <p>Blank previews usually indicate code generation issues:</p> <pre><code>- **Check developer console** for JavaScript errors\n- **Verify WebContainer is running** properly\n- **Try refreshing** the preview pane\n- **Check for hallucinated code** in the generated files\n- **Restart the development server** if issues persist\n</code></pre> MCP server connection failed <p>If you're having trouble with MCP integrations:</p> <pre><code>- **Verify server configuration** in Settings \u2192 MCP\n- **Check server endpoints** and authentication credentials\n- **Test server connectivity** outside of CodinIT.dev\n- **Review MCP server logs** for specific error messages\n- **Ensure server supports** the MCP protocol version\n</code></pre> Git integration not working <p>Common Git-related issues and solutions:</p> <pre><code>- **GitHub connection failed**: Verify your GitHub token has correct permissions\n- **Repository not found**: Check repository URL and access permissions\n- **Push/pull failed**: Ensure you have write access to the repository\n- **Merge conflicts**: Resolve conflicts manually or use the diff viewer\n- **Large files blocked**: Check GitHub's file size limits\n</code></pre> Deployment failed <p>Deployment issues can be resolved by:</p> <pre><code>- **Checking build logs** for specific error messages\n- **Verifying environment variables** are set correctly\n- **Testing locally** before deploying\n- **Checking platform-specific requirements** (Node version, build commands)\n- **Reviewing deployment configuration** in platform settings\n</code></pre> Everything works, but the results are bad <p>For suboptimal AI responses, try these solutions:</p> <pre><code>- **Switch to a more capable model**: Use Claude 3.5 Sonnet, GPT-4o, or Claude 4 Opus\n- **Be more specific** in your prompts about requirements and technologies\n- **Use the enhance prompt feature** to refine your requests\n- **Break complex tasks** into smaller, focused prompts\n- **Provide context** about your project structure and goals\n</code></pre> WebContainer preview not loading <p>If the live preview isn't working:</p> <pre><code>- **Check WebContainer status** in the terminal\n- **Verify Node.js compatibility** with your project\n- **Restart the development environment**\n- **Clear browser cache** and reload\n- **Check for conflicting ports** (default is 5173)\n</code></pre> Received structured exception #0xc0000005: access violation <p>Windows-specific issue: Update the Visual C++ Redistributable</p> Miniflare or Wrangler errors in Windows <p>Windows development environment: Install Visual Studio C++ (version 14.40.33816 or later). More details in GitHub Issues</p> Provider not showing up after adding it <p>If your custom LLM provider isn't appearing:</p> <pre><code>- **Restart the development server** to reload providers\n- **Check the provider registry** in `app/lib/modules/llm/registry.ts`\n- **Verify the provider class** extends `BaseProvider` correctly\n- **Check browser console** for provider loading errors\n- **Ensure proper TypeScript compilation** without errors\n</code></pre>"},{"location":"FAQ/#get-help-support","title":"Get Help &amp; Support","text":"<p>Report Issues</p> <p>Open an Issue in our GitHub Repository</p>"}]}